{"version":3,"sources":["TabBar.tsx"],"names":["scheduleInNextFrame","cb","frame","requestAnimationFrame","cancelAnimationFrame","TabBar","React","Component","layout","width","height","tabWidths","Animated","Value","createRef","undefined","style","tabStyle","StyleSheet","flatten","index","routes","scrollEnabled","flattenedWidth","key","endsWith","parseFloat","Number","isFinite","length","i","getComputedTabWidth","tabBarWidth","layoutWidth","contentStyle","space","marginHorizontal","marginLeft","marginRight","paddingHorizontal","paddingLeft","paddingRight","props","state","contentContainerStyle","navigationState","reduce","acc","_","getFlattenedTabWidth","getComputedContentContainerSpacing","value","getTabBarWidth","maxDistance","getMaxScrollDistance","scrollValue","Math","max","min","Platform","OS","I18nManager","isRTL","centerDistance","Array","from","total","tabWidth","scrollAmount","normalizeScrollValue","scrollView","scrollViewRef","current","scrollTo","getNode","x","getScrollAmount","animated","e","nativeEvent","cancelNextFrameCb","setState","maxScrollDistance","multiply","sub","componentDidUpdate","prevProps","prevState","every","r","resetScroll","componentWillUnmount","render","position","jumpTo","bounces","getAccessibilityLabel","getAccessible","getLabelText","getTestID","renderBadge","renderIcon","renderLabel","renderTabBarItem","activeColor","inactiveColor","pressColor","pressOpacity","onTabPress","onTabLongPress","labelStyle","indicatorStyle","indicatorContainerStyle","isWidthDynamic","tabBarWidthPercent","translateX","getTranslateX","handleLayout","styles","tabBar","indicatorContainer","transform","renderIndicator","getTabWidth","getMemoizedTabWidthGettter","scroll","tabContent","container","event","contentOffset","map","route","onLayout","measuredTabWidths","onPress","defaultPrevented","preventDefault","onLongPress","title","toUpperCase","accessible","accessibilityLabel","testID","create","flex","overflow","select","default","web","backgroundColor","elevation","shadowColor","shadowOpacity","shadowRadius","hairlineWidth","shadowOffset","zIndex","flexDirection","flexWrap","top","left","right","bottom"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  View,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n  LayoutChangeEvent,\n  I18nManager,\n  Platform,\n} from 'react-native';\nimport Animated from 'react-native-reanimated';\nimport TabBarItem, { Props as TabBarItemProps } from './TabBarItem';\nimport TabBarIndicator, { Props as IndicatorProps } from './TabBarIndicator';\nimport memoize from './memoize';\nimport {\n  Route,\n  Scene,\n  SceneRendererProps,\n  NavigationState,\n  Layout,\n  Event,\n} from './types';\n\nexport type Props<T extends Route> = SceneRendererProps & {\n  navigationState: NavigationState<T>;\n  scrollEnabled?: boolean;\n  bounces?: boolean;\n  activeColor?: string;\n  inactiveColor?: string;\n  pressColor?: string;\n  pressOpacity?: number;\n  getLabelText: (scene: Scene<T>) => string | undefined;\n  getAccessible: (scene: Scene<T>) => boolean | undefined;\n  getAccessibilityLabel: (scene: Scene<T>) => string | undefined;\n  getTestID: (scene: Scene<T>) => string | undefined;\n  renderLabel?: (\n    scene: Scene<T> & {\n      focused: boolean;\n      color: string;\n    }\n  ) => React.ReactNode;\n  renderIcon?: (\n    scene: Scene<T> & {\n      focused: boolean;\n      color: string;\n    }\n  ) => React.ReactNode;\n  renderBadge?: (scene: Scene<T>) => React.ReactNode;\n  renderIndicator: (props: IndicatorProps<T>) => React.ReactNode;\n  renderTabBarItem?: (\n    props: TabBarItemProps<T> & { key: string }\n  ) => React.ReactElement;\n  onTabPress?: (scene: Scene<T> & Event) => void;\n  onTabLongPress?: (scene: Scene<T>) => void;\n  tabStyle?: StyleProp<ViewStyle>;\n  indicatorStyle?: StyleProp<ViewStyle>;\n  indicatorContainerStyle?: StyleProp<ViewStyle>;\n  labelStyle?: StyleProp<TextStyle>;\n  contentContainerStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n};\n\ntype State = {\n  layout: Layout;\n  tabWidths: { [key: string]: number };\n};\n\nconst scheduleInNextFrame = (cb: () => void) => {\n  let frame = requestAnimationFrame(() => {\n    frame = requestAnimationFrame(cb);\n  });\n\n  return () => cancelAnimationFrame(frame);\n};\n\nexport default class TabBar<T extends Route> extends React.Component<\n  Props<T>,\n  State\n> {\n  static defaultProps = {\n    getLabelText: ({ route }: Scene<Route>) =>\n      typeof route.title === 'string' ? route.title.toUpperCase() : route.title,\n    getAccessible: ({ route }: Scene<Route>) =>\n      typeof route.accessible !== 'undefined' ? route.accessible : true,\n    getAccessibilityLabel: ({ route }: Scene<Route>) =>\n      typeof route.accessibilityLabel === 'string'\n        ? route.accessibilityLabel\n        : typeof route.title === 'string'\n        ? route.title\n        : undefined,\n    getTestID: ({ route }: Scene<Route>) => route.testID,\n    renderIndicator: (props: IndicatorProps<Route>) => (\n      <TabBarIndicator {...props} />\n    ),\n  };\n\n  state: State = {\n    layout: { width: 0, height: 0 },\n    tabWidths: {},\n  };\n\n  componentDidUpdate(prevProps: Props<T>, prevState: State) {\n    const { navigationState } = this.props;\n    const { layout, tabWidths } = this.state;\n\n    if (\n      prevProps.navigationState.routes.length !==\n        navigationState.routes.length ||\n      prevProps.navigationState.index !== navigationState.index ||\n      prevState.layout.width !== layout.width ||\n      prevState.tabWidths !== tabWidths\n    ) {\n      if (\n        this.getFlattenedTabWidth(this.props.tabStyle) === 'auto' &&\n        !(\n          layout.width &&\n          navigationState.routes.every(\n            (r) => typeof tabWidths[r.key] === 'number'\n          )\n        )\n      ) {\n        // When tab width is dynamic, only adjust the scroll once we have all tab widths and layout\n        return;\n      }\n\n      this.resetScroll(navigationState.index);\n    }\n  }\n\n  componentWillUnmount() {\n    this.cancelNextFrameCb?.();\n  }\n\n  // to store the layout.width of each tab\n  // when all onLayout's are fired, this would be set in state\n  private measuredTabWidths: { [key: string]: number } = {};\n\n  private scrollAmount = new Animated.Value(0);\n\n  private scrollViewRef = React.createRef<Animated.ScrollView>();\n\n  private cancelNextFrameCb: (() => void) | undefined = undefined;\n\n  private getFlattenedTabWidth = (style: StyleProp<ViewStyle>) => {\n    const tabStyle = StyleSheet.flatten(style);\n\n    return tabStyle ? tabStyle.width : undefined;\n  };\n\n  private getComputedTabWidth = (\n    index: number,\n    layout: Layout,\n    routes: Route[],\n    scrollEnabled: boolean | undefined,\n    tabWidths: { [key: string]: number },\n    flattenedWidth: string | number | undefined\n  ) => {\n    if (flattenedWidth === 'auto') {\n      return tabWidths[routes[index].key] || 0;\n    }\n\n    switch (typeof flattenedWidth) {\n      case 'number':\n        return flattenedWidth;\n      case 'string':\n        if (flattenedWidth.endsWith('%')) {\n          const width = parseFloat(flattenedWidth);\n          if (Number.isFinite(width)) {\n            return layout.width * (width / 100);\n          }\n        }\n    }\n\n    if (scrollEnabled) {\n      return (layout.width / 5) * 2;\n    }\n\n    return layout.width / routes.length;\n  };\n\n  private getMemoizedTabWidthGettter = memoize(\n    (\n      layout: Layout,\n      routes: Route[],\n      scrollEnabled: boolean | undefined,\n      tabWidths: { [key: string]: number },\n      flattenedWidth: string | number | undefined\n    ) => (i: number) =>\n      this.getComputedTabWidth(\n        i,\n        layout,\n        routes,\n        scrollEnabled,\n        tabWidths,\n        flattenedWidth\n      )\n  );\n\n  private getMaxScrollDistance = (tabBarWidth: number, layoutWidth: number) =>\n    tabBarWidth - layoutWidth;\n\n  private getComputedContentContainerSpacing = (style?: StyleProp<ViewStyle>) => {\n    const contentStyle = StyleSheet.flatten(style);\n\n    let space = 0;\n\n    if (typeof contentStyle?.marginHorizontal === 'number') {\n      space += contentStyle.marginHorizontal * 2;\n    }\n\n    if (typeof contentStyle?.marginLeft === 'number') {\n      space += contentStyle.marginLeft;\n    }\n\n    if (typeof contentStyle?.marginRight === 'number') {\n      space += contentStyle.marginRight;\n    }\n\n    if (typeof contentStyle?.paddingHorizontal === 'number') {\n      space += contentStyle.paddingHorizontal *2;\n    }\n\n    if (typeof contentStyle?.paddingLeft === 'number') {\n      space += contentStyle.paddingLeft;\n    }\n\n    if (typeof contentStyle?.paddingRight === 'number') {\n      space += contentStyle.paddingRight;\n    }\n\n    return space;\n  }\n\n  private getTabBarWidth = (props: Props<T>, state: State) => {\n    const { layout, tabWidths } = state;\n    const { scrollEnabled, tabStyle, contentContainerStyle } = props;\n    const { routes } = props.navigationState;\n\n    return routes.reduce<number>(\n      (acc, _, i) =>\n        acc +\n        this.getComputedTabWidth(\n          i,\n          layout,\n          routes,\n          scrollEnabled,\n          tabWidths,\n          this.getFlattenedTabWidth(tabStyle)\n        ),\n      this.getComputedContentContainerSpacing(contentContainerStyle)\n    );\n  };\n\n  private normalizeScrollValue = (\n    props: Props<T>,\n    state: State,\n    value: number\n  ) => {\n    const { layout } = state;\n    const tabBarWidth = this.getTabBarWidth(props, state);\n    const maxDistance = this.getMaxScrollDistance(tabBarWidth, layout.width);\n    const scrollValue = Math.max(Math.min(value, maxDistance), 0);\n\n    if (Platform.OS === 'android' && I18nManager.isRTL) {\n      // On Android, scroll value is not applied in reverse in RTL\n      // so we need to manually adjust it to apply correct value\n      return maxDistance - scrollValue;\n    }\n\n    return scrollValue;\n  };\n\n  private getScrollAmount = (props: Props<T>, state: State, index: number) => {\n    const { layout, tabWidths } = state;\n    const { scrollEnabled, tabStyle } = props;\n    const { routes } = props.navigationState;\n\n    const centerDistance = Array.from({ length: index + 1 }).reduce<number>(\n      (total, _, i) => {\n        const tabWidth = this.getComputedTabWidth(\n          i,\n          layout,\n          routes,\n          scrollEnabled,\n          tabWidths,\n          this.getFlattenedTabWidth(tabStyle)\n        );\n\n        // To get the current index centered we adjust scroll amount by width of indexes\n        // 0 through (i - 1) and add half the width of current index i\n        return total + (index === i ? tabWidth / 2 : tabWidth);\n      },\n      0\n    );\n\n    const scrollAmount = centerDistance - layout.width / 2;\n\n    return this.normalizeScrollValue(props, state, scrollAmount);\n  };\n\n  private resetScroll = (index: number) => {\n    if (this.props.scrollEnabled) {\n      // getNode() is not necessary in newer versions of React Native\n      const scrollView =\n        // @ts-ignore\n        typeof this.scrollViewRef.current?.scrollTo === 'function'\n          ? this.scrollViewRef.current\n          : this.scrollViewRef.current?.getNode();\n\n      // @ts-ignore\n      scrollView?.scrollTo({\n        x: this.getScrollAmount(this.props, this.state, index),\n        animated: true,\n      });\n    }\n  };\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    if (\n      this.state.layout.width === width &&\n      this.state.layout.height === height\n    ) {\n      return;\n    }\n\n    // If we don't delay this state update, the UI gets stuck in weird state\n    // Maybe an issue in Reanimated?\n    // https://github.com/satya164/react-native-tab-view/issues/877\n    // Cancel any pending callbacks, since we're scheduling a new one\n    this.cancelNextFrameCb?.();\n    this.cancelNextFrameCb = scheduleInNextFrame(() =>\n      this.setState({\n        layout: {\n          height,\n          width,\n        },\n      })\n    );\n  };\n\n  private getTranslateX = memoize(\n    (scrollAmount: Animated.Node<number>, maxScrollDistance: number) =>\n      Animated.multiply(\n        Platform.OS === 'android' && I18nManager.isRTL\n          ? Animated.sub(maxScrollDistance, scrollAmount)\n          : scrollAmount,\n        I18nManager.isRTL ? 1 : -1\n      )\n  );\n\n  render() {\n    const {\n      position,\n      navigationState,\n      jumpTo,\n      scrollEnabled,\n      bounces,\n      getAccessibilityLabel,\n      getAccessible,\n      getLabelText,\n      getTestID,\n      renderBadge,\n      renderIcon,\n      renderLabel,\n      renderTabBarItem,\n      activeColor,\n      inactiveColor,\n      pressColor,\n      pressOpacity,\n      onTabPress,\n      onTabLongPress,\n      tabStyle,\n      labelStyle,\n      indicatorStyle,\n      contentContainerStyle,\n      style,\n      indicatorContainerStyle,\n    } = this.props;\n    const { layout, tabWidths } = this.state;\n    const { routes } = navigationState;\n\n    const isWidthDynamic = this.getFlattenedTabWidth(tabStyle) === 'auto';\n    const tabBarWidth = this.getTabBarWidth(this.props, this.state);\n    const tabBarWidthPercent = `${routes.length * 40}%`;\n    const translateX = this.getTranslateX(\n      this.scrollAmount,\n      this.getMaxScrollDistance(tabBarWidth, layout.width)\n    );\n\n    return (\n      <Animated.View\n        onLayout={this.handleLayout}\n        style={[styles.tabBar, style]}\n      >\n        <Animated.View\n          pointerEvents=\"none\"\n          style={[\n            styles.indicatorContainer,\n            scrollEnabled ? { transform: [{ translateX }] as any } : null,\n            tabBarWidth\n              ? { width: tabBarWidth }\n              : scrollEnabled\n              ? { width: tabBarWidthPercent }\n              : null,\n            indicatorContainerStyle,\n          ]}\n        >\n          {this.props.renderIndicator({\n            position,\n            layout,\n            navigationState,\n            jumpTo,\n            width: isWidthDynamic ? 'auto' : `${100 / routes.length}%`,\n            style: indicatorStyle,\n            getTabWidth: this.getMemoizedTabWidthGettter(\n              layout,\n              routes,\n              scrollEnabled,\n              tabWidths,\n              this.getFlattenedTabWidth(tabStyle)\n            ),\n          })}\n        </Animated.View>\n        <View style={styles.scroll}>\n          <Animated.ScrollView\n            horizontal\n            accessibilityRole=\"tablist\"\n            keyboardShouldPersistTaps=\"handled\"\n            scrollEnabled={scrollEnabled}\n            bounces={bounces}\n            alwaysBounceHorizontal={false}\n            scrollsToTop={false}\n            showsHorizontalScrollIndicator={false}\n            automaticallyAdjustContentInsets={false}\n            overScrollMode=\"never\"\n            contentContainerStyle={[\n              styles.tabContent,\n              scrollEnabled\n                ? { width: tabBarWidth || tabBarWidthPercent }\n                : styles.container,\n              contentContainerStyle,\n            ]}\n            scrollEventThrottle={16}\n            onScroll={Animated.event([\n              {\n                nativeEvent: {\n                  contentOffset: { x: this.scrollAmount },\n                },\n              },\n            ])}\n            ref={this.scrollViewRef}\n          >\n            {routes.map((route: T) => {\n              const props: TabBarItemProps<T> & { key: string } = {\n                key: route.key,\n                position: position,\n                route: route,\n                navigationState: navigationState,\n                getAccessibilityLabel: getAccessibilityLabel,\n                getAccessible: getAccessible,\n                getLabelText: getLabelText,\n                getTestID: getTestID,\n                renderBadge: renderBadge,\n                renderIcon: renderIcon,\n                renderLabel: renderLabel,\n                activeColor: activeColor,\n                inactiveColor: inactiveColor,\n                pressColor: pressColor,\n                pressOpacity: pressOpacity,\n                onLayout: isWidthDynamic\n                  ? (e) => {\n                      this.measuredTabWidths[route.key] =\n                        e.nativeEvent.layout.width;\n\n                      // When we have measured widths for all of the tabs, we should updates the state\n                      // We avoid doing separate setState for each layout since it triggers multiple renders and slows down app\n                      if (\n                        routes.every(\n                          (r) =>\n                            typeof this.measuredTabWidths[r.key] === 'number'\n                        )\n                      ) {\n                        this.setState({\n                          tabWidths: { ...this.measuredTabWidths },\n                        });\n                      }\n                    }\n                  : undefined,\n                onPress: () => {\n                  const event: Scene<T> & Event = {\n                    route,\n                    defaultPrevented: false,\n                    preventDefault: () => {\n                      event.defaultPrevented = true;\n                    },\n                  };\n\n                  onTabPress?.(event);\n\n                  if (event.defaultPrevented) {\n                    return;\n                  }\n\n                  this.props.jumpTo(route.key);\n                },\n                onLongPress: () => onTabLongPress?.({ route }),\n                labelStyle: labelStyle,\n                style: tabStyle,\n              };\n\n              return renderTabBarItem ? (\n                renderTabBarItem(props)\n              ) : (\n                <TabBarItem {...props} />\n              );\n            })}\n          </Animated.ScrollView>\n        </View>\n      </Animated.View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  scroll: {\n    overflow: Platform.select({ default: 'scroll', web: undefined }),\n  },\n  tabBar: {\n    backgroundColor: '#2196f3',\n    elevation: 4,\n    shadowColor: 'black',\n    shadowOpacity: 0.1,\n    shadowRadius: StyleSheet.hairlineWidth,\n    shadowOffset: {\n      height: StyleSheet.hairlineWidth,\n      width: 0,\n    },\n    zIndex: 1,\n  },\n  tabContent: {\n    flexDirection: 'row',\n    flexWrap: 'nowrap',\n  },\n  indicatorContainer: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n  },\n});\n"]}